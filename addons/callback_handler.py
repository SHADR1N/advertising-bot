from aiogram import types as aiotypes, Bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from addons.keyboards import create_inline_knb, create_reply_knb
from database.enjine_db import new_publication, check_last_publication, get_or_create_user


class NewPublication(StatesGroup):
    link = State()
    category = State()
    subscribers = State()
    price = State()
    hours_top = State()
    hours_wall = State()
    count_view = State()
    mutual_pr = State()
    admin = State()


class CallbackHandler:
    def __init__(self, bot):
        self.bot: Bot = bot
        self.channel = -1001937339941

    @staticmethod
    async def get_info_publication(uid, state):
        message = """ü§ù –ü—Ä–æ–¥–∞–∂–∞ —Ä–µ–∫–ª–∞–º—ã
üìù –î–ª—è –ø–æ–¥–∞—á–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Ç–∞–∫–∏–µ –ø—É–Ω–∫—Ç—ã –∫–∞–∫: 

üì¢ –ö–∞–Ω–∞–ª: {}
üîò –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {} 
üìà –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {}
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã: {} 
üåç –ß–∞—Å–æ–≤ –≤ —Ç–æ–ø–µ: {}
üëâ –ß–∞—Å–æ–≤ –≤ –ª–µ–Ω—Ç–µ: {}
üëÅ –û—Ö–≤–∞—Ç –ø–æ—Å—Ç–∞: {}
ü§ù –í–∑–∞–∏–º–æ–ø–∏–∞—Ä: {}
‚úÖ –ê–¥–º–∏–Ω: {}

üì° –ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
–ó–∞–∫–∏–¥—ã–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –º–æ–∂–Ω–æ –Ω–µ —á–∞—â–µ —á–µ–º 1 —Ä–∞–∑ –≤ 3 –¥–Ω—è.
üò° –ü–æ—Ä–Ω–æ, –±–æ—Ç—ã, —Å—Ç–∞–≤–∫–∏ –∏ –≤—Å—è–∫—É—é –¥–∏—á—å –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å, —Å—Ä–∞–∑—É –±–∞–Ω —Å –ø–æ–º–µ—Ç–∫–æ–π —Å–ø–∞–º."""

        state_data = await state.get_data()
        data = (
            state_data.get("link", ""),
            state_data.get("category", ""),
            state_data.get("subscribers", ""),
            state_data.get("price", ""),
            state_data.get("hours_top", ""),
            state_data.get("hours_wall", ""),
            state_data.get("count_view", ""),
            state_data.get("mutual_pr", ""),
            state_data.get("admin", ""),
        )
        return message.format(*data)

    async def send_message_to_channel(self, state: FSMContext):
        message = """ü§ù #–ü—Ä–æ–¥–∞–∂–∞_—Ä–µ–∫–ª–∞–º—ã
üì¢ –ö–∞–Ω–∞–ª: {}
üîò –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {} 
üìà –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {}
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã: {} 
üåç –ß–∞—Å–æ–≤ –≤ —Ç–æ–ø–µ: {}
üëâ –ß–∞—Å–æ–≤ –≤ –ª–µ–Ω—Ç–µ: {}
üëÅ –û—Ö–≤–∞—Ç –ø–æ—Å—Ç–∞: {}
ü§ù –í–∑–∞–∏–º–æ–ø–∏–∞—Ä: {}
‚úÖ –ê–¥–º–∏–Ω: {}"""

        state_data = await state.get_data()
        data = (
            state_data.get("link", ""),
            state_data.get("category", ""),
            state_data.get("subscribers", ""),
            state_data.get("price", ""),
            state_data.get("hours_top", ""),
            state_data.get("hours_wall", ""),
            state_data.get("count_view", ""),
            state_data.get("mutual_pr", ""),
            state_data.get("admin", ""),
        )
        message = message.format(*data)
        await self.bot.send_message(self.channel, message, disable_web_page_preview=True)

    async def answer(self, message: aiotypes.CallbackQuery, state: FSMContext):
        data = message.data
        uid = message.from_user.id
        mid = message.message.message_id
        current_state = await state.get_state()
        await get_or_create_user(uid)

        if data == "cancel":
            await state.finish()
            return await self.bot.delete_message(chat_id=uid, message_id=mid)

        if current_state == "NewPublication:admin" and data in (
            "send_post", "delete_and_create"
        ):
            if data == "delete_and_create":
                keyboard = [
                    {"–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ": "new_publication"}
                ]
                knb = await create_inline_knb(keyboard)

                text_answer = "üì£ –ü—Ä–æ—Å–∏–º –æ–±—Ä–∞—Ç–∏—Ç—å –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ—Å—Ç–æ–≤ –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.\n\n" \
                              "‚ùå –ë–û–¢–´, –ü–û–†–ù–û, –ó–ê–†–ê–ë–û–¢–ö–ò, –°–¢–ê–í–ö–ò.\n\n" \
                              "üö´ –¢–ê–ö–ò–ï –ü–û–°–¢–´ –ü–†–û–í–ï–†–ö–£ –ù–ï –ü–†–û–•–û–î–Ø–¢, –ü–û–°–¢ –ë–£–î–ï–¢ –£–î–ê–õ–Å–ù –ê –í–´ –ó–ê–ë–ê–ù–ï–ù–´."

                return await self.bot.edit_message_text(chat_id=uid, message_id=mid, text=text_answer, reply_markup=knb)

            if data == "send_post":
                state_data = await state.get_data()
                data = dict(
                    link=state_data.get("link", ""),
                    category=state_data.get("category", ""),
                    subscribers=state_data.get("subscribers", ""),
                    price=state_data.get("price", ""),
                    hours_top=state_data.get("hours_top", ""),
                    hours_wall=state_data.get("hours_wall", ""),
                    count_veiw=state_data.get("count_view", ""),
                    mutual_pr=state_data.get("mutual_pr", ""),
                    admin=state_data.get("admin", ""),
                )
                await new_publication(
                    uid,
                    **data
                )
                await self.send_message_to_channel(state)

            await state.finish()

            keyboard = [
                {"–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ": "new_publication"}
            ]
            knb = await create_inline_knb(keyboard)

            return await self.bot.edit_message_text(chat_id=uid, message_id=mid, text="‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", reply_markup=knb)

        if data == "new_publication":
            access = await check_last_publication(uid)
            if not access:
                return await self.bot.edit_message_text(chat_id=uid, message_id=mid, text="‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ 1 —Ä–∞–∑ –≤ 3 —Å—É—Ç–æ–∫.")

            new_text = await self.get_info_publication(uid, state)
            keyboard = [
                {"‚ùå –û—Ç–º–µ–Ω–∞": "cancel"}
            ]

            knb = await create_inline_knb(keyboard)
            await NewPublication.link.set()
            await self.bot.edit_message_text(chat_id=uid, message_id=mid, text=new_text, disable_web_page_preview=True)
            return await self.bot.send_message(
                uid,
                "üì¢ –ö–∞–Ω–∞–ª (–≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/username):",
                reply_markup=knb, disable_web_page_preview=True)

        keyboard = [
            {"–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ": "new_publication"}
        ]
        knb = await create_inline_knb(keyboard)

        text_answer = "üì£ –ü—Ä–æ—Å–∏–º –æ–±—Ä–∞—Ç–∏—Ç—å –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ—Å—Ç–æ–≤ –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.\n\n" \
                      "‚ùå –ë–û–¢–´, –ü–û–†–ù–û, –ó–ê–†–ê–ë–û–¢–ö–ò, –°–¢–ê–í–ö–ò.\n\n" \
                      "üö´ –¢–ê–ö–ò–ï –ü–û–°–¢–´ –ü–†–û–í–ï–†–ö–£ –ù–ï –ü–†–û–•–û–î–Ø–¢, –ü–û–°–¢ –ë–£–î–ï–¢ –£–î–ê–õ–Å–ù –ê –í–´ –ó–ê–ë–ê–ù–ï–ù–´."


        try:
            await self.bot.edit_message_text(chat_id=uid, message_id=mid, text=text_answer, reply_markup=knb)
        except:
            await self.bot.send_message(uid, text_answer, reply_markup=knb)
        return