import re

from aiogram import types as aiotypes
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from database.enjine_db import get_or_create_user

from addons.keyboards import create_inline_knb, create_reply_knb


class NewPublication(StatesGroup):
    link = State()
    category = State()
    subscribers = State()
    price = State()
    hours_top = State()
    hours_wall = State()
    count_view = State()
    mutual_pr = State()
    admin = State()


class MessageHandler:
    def __init__(self, bot):
        self.bot = bot

    @staticmethod
    async def is_valid_telegram_url(url):
        pattern = r'https?:\/\/(?:www\.)?t\.me\/([a-zA-Z0-9_]+){1,32}\/?$'
        return bool(re.match(pattern, url))

    @staticmethod
    async def get_info_publication(uid, state: FSMContext):
            message = """ü§ù –ü—Ä–æ–¥–∞–∂–∞ —Ä–µ–∫–ª–∞–º—ã
üìù –î–ª—è –ø–æ–¥–∞—á–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Ç–∞–∫–∏–µ –ø—É–Ω–∫—Ç—ã –∫–∞–∫: 

üì¢ –ö–∞–Ω–∞–ª: {}
üîò –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {} 
üìà –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {}
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã: {} 
üåç –ß–∞—Å–æ–≤ –≤ —Ç–æ–ø–µ: {}
üëâ –ß–∞—Å–æ–≤ –≤ –ª–µ–Ω—Ç–µ: {}
üëÅ –û—Ö–≤–∞—Ç –ø–æ—Å—Ç–∞: {}
ü§ù –í–∑–∞–∏–º–æ–ø–∏–∞—Ä: {}
‚úÖ –ê–¥–º–∏–Ω: {}

üì° –ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
–ó–∞–∫–∏–¥—ã–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –º–æ–∂–Ω–æ –Ω–µ —á–∞—â–µ —á–µ–º 1 —Ä–∞–∑ –≤ 3 –¥–Ω—è.
üò° –ü–æ—Ä–Ω–æ, –±–æ—Ç—ã, —Å—Ç–∞–≤–∫–∏ –∏ –≤—Å—è–∫—É—é –¥–∏—á—å –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å, —Å—Ä–∞–∑—É –±–∞–Ω —Å –ø–æ–º–µ—Ç–∫–æ–π —Å–ø–∞–º."""

            state_data = await state.get_data()
            data = (
                state_data.get("link", ""),
                state_data.get("category", ""),
                state_data.get("subscribers", ""),
                state_data.get("price", ""),
                state_data.get("hours_top", ""),
                state_data.get("hours_wall", ""),
                state_data.get("count_view", ""),
                state_data.get("mutual_pr", ""),
                state_data.get("admin", ""),
            )
            return message.format(*data)

    async def state_script(self, message: aiotypes.Message, state: FSMContext):
        data = message.text
        uid = message.from_user.id
        mid = message.message_id
        current_state = await state.get_state()
        knb = await create_inline_knb([{"‚ùå –û—Ç–º–µ–Ω–∞": "cancel"}])

        if current_state == "NewPublication:admin":
            await state.update_data(admin=data)

            knb = await create_inline_knb([
                {"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç": "send_post"},
                {"–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π": "delete_and_create"}
            ])
            text = await self.get_info_publication(uid, state)
            return await self.bot.send_message(uid, text=text, reply_markup=knb, disable_web_page_preview=True)

        if current_state == "NewPublication:mutual_pr":
            if data not in ("–î–∞", "–ù–µ—Ç"):
                knb = await create_reply_knb([["–î–∞", "–ù–µ—Ç"]])
                return await self.bot.send_message(uid,
                                                   "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å, –î–∞ –∏–ª–∏ –ù–µ—Ç.\nü§ù –í–∑–∞–∏–º–æ–ø–∏–∞—Ä (–î–∞/–ù–µ—Ç):",
                                                   reply_markup=knb)

            await state.update_data(mutual_pr=data)

            await NewPublication.next()

            knb = aiotypes.ReplyKeyboardRemove()
            return await self.bot.send_message(uid, "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ê–¥–º–∏–Ω–∞:", reply_markup=knb)

        if current_state == "NewPublication:count_view":
            if not data.isdigit():
                return await self.bot.send_message(uid,
                                                   "–û—Ö–≤–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.\nüëÅ –û—Ö–≤–∞—Ç –ø–æ—Å—Ç–∞:",
                                                   reply_markup=knb)

            await state.update_data(count_view=int(data))

            await NewPublication.next()
            knb = await create_reply_knb([["–î–∞", "–ù–µ—Ç"]])
            return await self.bot.send_message(uid, "ü§ù –í–∑–∞–∏–º–æ–ø–∏–∞—Ä (–î–∞/–ù–µ—Ç):", reply_markup=knb)

        if current_state == "NewPublication:hours_wall":
            if not data.isdigit():
                return await self.bot.send_message(uid,
                                                   "–ö–æ–ª-–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.\nüëâ –ß–∞—Å–æ–≤ –≤ –ª–µ–Ω—Ç–µ:",
                                                   reply_markup=knb)

            await state.update_data(hours_wall=int(data))

            await NewPublication.next()
            return await self.bot.send_message(uid, "üëÅ –û—Ö–≤–∞—Ç –ø–æ—Å—Ç–∞:", reply_markup=knb)

        if current_state == "NewPublication:hours_top":
            if not data.isdigit():
                return await self.bot.send_message(uid,
                                                   "–ö–æ–ª-–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.\nüåç –ß–∞—Å–æ–≤ –≤ —Ç–æ–ø–µ:",
                                                   reply_markup=knb)

            await state.update_data(hours_top=int(data))

            await NewPublication.next()
            return await self.bot.send_message(uid, "üëâ –ß–∞—Å–æ–≤ –≤ –ª–µ–Ω—Ç–µ:", reply_markup=knb)

        if current_state == "NewPublication:price":
            if not data.isdigit():
                return await self.bot.send_message(uid,
                                                   "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.\nüí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã:",
                                                   reply_markup=knb)

            await state.update_data(price=int(data))
            await NewPublication.next()
            return await self.bot.send_message(uid, "üåç –ß–∞—Å–æ–≤ –≤ —Ç–æ–ø–µ:", reply_markup=knb)

        if current_state == "NewPublication:subscribers":
            if not data.isdigit():
                return await self.bot.send_message(uid,
                                                   "–ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.\nüìà –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:",
                                                   reply_markup=knb)

            await state.update_data(subscribers=int(data))
            await NewPublication.next()
            return await self.bot.send_message(uid, "üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã:", reply_markup=knb)

        if current_state == "NewPublication:category":
            await state.update_data(category=data)
            await NewPublication.next()
            return await self.bot.send_message(uid, "üìà –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:", reply_markup=knb)

        if current_state == "NewPublication:link":
            if await self.is_valid_telegram_url(data):
                await state.update_data(link=data)
                await NewPublication.next()
                return await self.bot.send_message(uid, "üîò –ö–∞—Ç–µ–≥–æ—Ä–∏—è:", reply_markup=knb)
            else:
                return await self.bot.send_message(uid,
                                                   "‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –≤–µ—Ä–Ω–∞—è.\n"
                                                   "üì¢ –ö–∞–Ω–∞–ª (–≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/username)",
                                                   reply_markup=knb, disable_web_page_preview=True)

        return await message.answer("–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    async def answer(self, message: aiotypes.Message, state: FSMContext):
        uid = message.from_user.id
        text = message.text
        current_state = await state.get_state()
        await get_or_create_user(uid)

        if current_state:
            return await self.state_script(message, state)

        if text == "/start":
            keyboard = [
                {"–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ": "new_publication"}
            ]
            knb = await create_inline_knb(keyboard)

            text_answer = "üì£ –ü—Ä–æ—Å–∏–º –æ–±—Ä–∞—Ç–∏—Ç—å –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ—Å—Ç–æ–≤ –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.\n\n" \
                          "‚ùå –ë–û–¢–´, –ü–û–†–ù–û, –ó–ê–†–ê–ë–û–¢–ö–ò, –°–¢–ê–í–ö–ò.\n\n" \
                          "üö´ –¢–ê–ö–ò–ï –ü–û–°–¢–´ –ü–†–û–í–ï–†–ö–£ –ù–ï –ü–†–û–•–û–î–Ø–¢, –ü–û–°–¢ –ë–£–î–ï–¢ –£–î–ê–õ–Å–ù –ê –í–´ –ó–ê–ë–ê–ù–ï–ù–´."

            return await message.answer(text_answer, reply_markup=knb)

        keyboard = [
            {"–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ": "new_publication"}
        ]
        knb = await create_inline_knb(keyboard)

        text_answer = "üì£ –ü—Ä–æ—Å–∏–º –æ–±—Ä–∞—Ç–∏—Ç—å –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ—Å—Ç–æ–≤ –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.\n\n" \
                      "‚ùå –ë–û–¢–´, –ü–û–†–ù–û, –ó–ê–†–ê–ë–û–¢–ö–ò, –°–¢–ê–í–ö–ò.\n\n" \
                      "üö´ –¢–ê–ö–ò–ï –ü–û–°–¢–´ –ü–†–û–í–ï–†–ö–£ –ù–ï –ü–†–û–•–û–î–Ø–¢, –ü–û–°–¢ –ë–£–î–ï–¢ –£–î–ê–õ–Å–ù –ê –í–´ –ó–ê–ë–ê–ù–ï–ù–´."

        return await self.bot.send_message(uid, text_answer, reply_markup=knb)
